//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Controls/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""MapMovment"",
            ""id"": ""9ebe9d4c-a5c8-4ceb-b185-311fef6b8e31"",
            ""actions"": [
                {
                    ""name"": ""DragCamera"",
                    ""type"": ""Button"",
                    ""id"": ""9f07f631-b73e-4c25-93ee-a071b363714e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RestartCamera"",
                    ""type"": ""Button"",
                    ""id"": ""63d2ae9a-d489-49e1-9ad5-0ab64b1d3e1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8bd9b12f-c042-4ddc-a257-30cd02079c8b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b2578a8-beee-4ef1-a024-59107975e7fd"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MapMovment
        m_MapMovment = asset.FindActionMap("MapMovment", throwIfNotFound: true);
        m_MapMovment_DragCamera = m_MapMovment.FindAction("DragCamera", throwIfNotFound: true);
        m_MapMovment_RestartCamera = m_MapMovment.FindAction("RestartCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MapMovment
    private readonly InputActionMap m_MapMovment;
    private List<IMapMovmentActions> m_MapMovmentActionsCallbackInterfaces = new List<IMapMovmentActions>();
    private readonly InputAction m_MapMovment_DragCamera;
    private readonly InputAction m_MapMovment_RestartCamera;
    public struct MapMovmentActions
    {
        private @PlayerController m_Wrapper;
        public MapMovmentActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @DragCamera => m_Wrapper.m_MapMovment_DragCamera;
        public InputAction @RestartCamera => m_Wrapper.m_MapMovment_RestartCamera;
        public InputActionMap Get() { return m_Wrapper.m_MapMovment; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapMovmentActions set) { return set.Get(); }
        public void AddCallbacks(IMapMovmentActions instance)
        {
            if (instance == null || m_Wrapper.m_MapMovmentActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MapMovmentActionsCallbackInterfaces.Add(instance);
            @DragCamera.started += instance.OnDragCamera;
            @DragCamera.performed += instance.OnDragCamera;
            @DragCamera.canceled += instance.OnDragCamera;
            @RestartCamera.started += instance.OnRestartCamera;
            @RestartCamera.performed += instance.OnRestartCamera;
            @RestartCamera.canceled += instance.OnRestartCamera;
        }

        private void UnregisterCallbacks(IMapMovmentActions instance)
        {
            @DragCamera.started -= instance.OnDragCamera;
            @DragCamera.performed -= instance.OnDragCamera;
            @DragCamera.canceled -= instance.OnDragCamera;
            @RestartCamera.started -= instance.OnRestartCamera;
            @RestartCamera.performed -= instance.OnRestartCamera;
            @RestartCamera.canceled -= instance.OnRestartCamera;
        }

        public void RemoveCallbacks(IMapMovmentActions instance)
        {
            if (m_Wrapper.m_MapMovmentActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMapMovmentActions instance)
        {
            foreach (var item in m_Wrapper.m_MapMovmentActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MapMovmentActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MapMovmentActions @MapMovment => new MapMovmentActions(this);
    public interface IMapMovmentActions
    {
        void OnDragCamera(InputAction.CallbackContext context);
        void OnRestartCamera(InputAction.CallbackContext context);
    }
}
